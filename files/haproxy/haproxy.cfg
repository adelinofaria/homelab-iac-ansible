global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
	ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
	ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	timeout connect 5000
	timeout client  50000
	timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

# Custom config

# In case it's a http request, we straight up redirect to https
frontend www-http
	# Redirect HTTP to HTTPS
	bind *:80
	# Adds http header to end of end of the HTTP request
	http-request add-header X-Forwarded-Proto http
	# Redirect with code 301 so the browser understands it is a redirect. If it's not SSL_FC.
	redirect scheme https code 301 if !{ ssl_fc }

# If the call is HTTPS we split traffic based on subdomain
frontend www-https
	# Bind 443 with the generated letsencrypt cert.
	bind *:443 ssl crt /etc/haproxy/certs/adelinofaria.me.pem
	# set x-forward to https
	http-request add-header X-Forwarded-Proto https
    # set X-SSL in case of ssl_fc <- explained below
    http-request set-header X-SSL %[ssl_fc]
	# Sets the default backend to use which is defined below with name 'webservers'
	default_backend webservers

    # acl pihole_domain hdr_end(host) -i pihole.adelinofaria.me
    # use_backend pihole_backend if pihole_domain

#---------------------------------------------------------------------
# BackEnd webserver Configuration
#---------------------------------------------------------------------
backend webservers
	balance roundrobin
	# ssl_fc: Returns true when the front connection was made via an SSL/TLS transport
	# layer and is locally deciphered. This means it has matched a socket declared
	# with a "bind" line having the "ssl" option.
	# Servers
    # check option - This option enables health checks on the server. By default, a server is
    # always considered available. If "check" is set, the server is available when
    # accepting periodic TCP connections, to ensure that it is really able to serve requests.
	#server webserver01 webserver01:443 check
    server webserver01 192.168.1.12:443 check
    #server webserver02 192.168.1.13:443 check

backend pihole_backend
    server pihole01 192.168.1.2:80
