global
    log /dev/log	local0                 # Global syslog servers (up to two).
    log /dev/log	local1 notice
    maxconn 4096
    user haproxy
    group haproxy

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Lua plugin for authelia integration
    lua-prepend-path /usr/share/haproxy/haproxy-auth-request/?/http.lua
    lua-load /usr/share/haproxy/haproxy-auth-request/auth-request.lua

    chroot /var/lib/haproxy
    daemon

defaults
    log global
    mode http
    option httplog
    timeout connect 10s
    timeout client  30s
    timeout server  30s
    maxconn 1000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    default-server check maxconn 100

#---------------------------------------------------------------
# Frontend Configuration
#---------------------------------------------------------------

# In case it's a http request, we straight up redirect to https
frontend frontend_http
    # Redirect HTTP to HTTPS
    bind *:80
    # Redirect with code 301 so the browser understands it is a redirect. If it's not SSL_FC.
    redirect scheme https code 301 if !{ ssl_fc }

# If the call is HTTPS we split traffic based on subdomain
frontend frontend_https
    # Bind 443 with the generated letsencrypt cert.
    bind *:443 ssl crt /etc/haproxy/certs/adelinofaria.me.pem

    ## Trusted Proxies.
    http-request del-header X-Forwarded-For

    ## Comment the above directive and the two directives below to enable the trusted proxies ACL.
    # acl src-trusted_proxies src -f trusted_proxies.src.acl
    # http-request del-header X-Forwarded-For if !src-trusted_proxies

    ## Ensure X-Forwarded-For is set for the auth request.
    # acl hdr-xff_exists req.hdr(X-Forwarded-For) -m found
    # http-request set-header X-Forwarded-For %[src] if !hdr-xff_exists
    # http-request replace-header X-Forwarded-For (.*) %[src],\1 if hdr-xff_exists
    option forwardfor if-none

    # Host ACLs
    acl protected-frontends hdr(host) -m reg -i ^(?i)(dash|homeassistant|jenkins|logs|pihole|pve|status)\.adelinofaria\.me
    acl host-authelia      hdr(host) -i          auth.adelinofaria.me
    acl host-dash          hdr(host) -i          dash.adelinofaria.me
    acl host-homeassistant hdr(host) -i homeassistant.adelinofaria.me
    acl host-jenkins       hdr(host) -i       jenkins.adelinofaria.me
    acl host-logs          hdr(host) -i          logs.adelinofaria.me
    acl host-pihole        hdr(host) -i        pihole.adelinofaria.me
    acl host-pve           hdr(host) -i           pve.adelinofaria.me
    acl host-status        hdr(host) -i        status.adelinofaria.me

    http-request set-var(req.scheme) str(https) if { ssl_fc }
    http-request set-var(req.scheme) str(http) if !{ ssl_fc }
    http-request set-var(req.questionmark) str(?) if { query -m found }

    # Required Headers
    http-request set-header X-Forwarded-Method %[method]
    http-request set-header X-Forwarded-Proto  %[var(req.scheme)]
    http-request set-header X-Forwarded-Host   %[req.hdr(Host)]
    http-request set-header X-Forwarded-URI    %[path]%[var(req.questionmark)]%[query]

    # Protect endpoints with haproxy-auth-request and Authelia
    http-request lua.auth-intercept backend_auth /api/authz/forward-auth HEAD * remote-user,remote-groups,remote-name,remote-email - if protected-frontends
    http-request deny if protected-frontends !{ var(txn.auth_response_successful) -m bool } { var(txn.auth_response_code) -m int 403 }
    http-request redirect location %[var(txn.auth_response_location)] if protected-frontends !{ var(txn.auth_response_successful) -m bool }

    # Authelia backend route
    use_backend backend_auth if host-authelia

    # Service backend route(s)
    use_backend backend_dash          if host-dash
    use_backend backend_homeassistant if host-homeassistant
    use_backend backend_jenkins       if host-jenkins
    use_backend backend_logs          if host-logs
    use_backend backend_pihole        if host-pihole
    use_backend backend_pve           if host-pve
    use_backend backend_status        if host-status

    # Sets the default backend to use which is defined below with name 'backend_public_web'
    default_backend backend_public_web

#---------------------------------------------------------------
# Backend Configuration
#---------------------------------------------------------------

backend backend_auth
    option httpchk HEAD /
    server auth01 192.168.1.6:9091

backend backend_dash
    ## Pass the Set-Cookie response headers to the user.
    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found
    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist

    server dash01 192.168.1.17:3000

backend backend_homeassistant
    ## Pass the Set-Cookie response headers to the user.
    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found
    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist

    server homeassistant01 192.168.1.24:8123

backend backend_jenkins
    ## Pass the Set-Cookie response headers to the user.
    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found
    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist

    server jenkins01 192.168.1.26:8080

backend backend_logs
    option httpchk HEAD /

    ## Pass the Set-Cookie response headers to the user.
    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found
    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist

    server logs01 192.168.1.16:9000

backend backend_pihole
    option httpchk HEAD /

    ## Pass the Set-Cookie response headers to the user.
    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found
    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist

    server pihole01 192.168.1.2:80

backend backend_pve
    ## Pass the Set-Cookie response headers to the user.
    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found
    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist

    server pve01 192.168.1.8:8006 ssl verify none

backend backend_status
    option httpchk HEAD /

    ## Pass the Set-Cookie response headers to the user.
    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found
    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist

    balance roundrobin
    server webserver01 192.168.1.12:443 cookie webserver01 ssl verify none

backend backend_public_web
    option httpchk HEAD /

    balance roundrobin
    server webserver01 192.168.1.12:443 cookie webserver01 ssl verify none
    # server webserver02 192.168.1.13:443 weight 1 maxconn 8192 check ssl verify none

#---------------------------------------------------------------
# Stats Page Configuration
#---------------------------------------------------------------

listen stats # Default uri /haproxy?stats
    bind *:8404
    maxconn 10

    stats enable
    stats auth admin:pingcap123 # Basic authentication for the stats page
    stats admin if TRUE         # Enables management of backend servers
    stats hide-version          # Hide HAProxy version info from the stats page
