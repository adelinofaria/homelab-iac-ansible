---
# file: tasks/logs01.yml
- name: Running logs01.yml playbook
  when: ansible_hostname == 'logs01'
  block:
    - name: Import role lxc
      ansible.builtin.include_role:
        name: lxc

    - name: OpenSearch - Download gpg key
      ansible.builtin.get_url:
        url: https://artifacts.opensearch.org/publickeys/opensearch.pgp
        dest: /usr/share/keyrings/artifacts.opensearch.org.asc
        mode: 0644
        force: true

    - name: OpenSearch - Add apt source
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/artifacts.opensearch.org.asc] https://artifacts.opensearch.org/releases/bundle/opensearch/2.x/apt stable main

    - name: MongoDB - Download gpg key
      ansible.builtin.get_url:
        url: https://www.mongodb.org/static/pgp/server-7.0.asc
        dest: /usr/share/keyrings/mongodb-server-7.0.asc
        mode: 0644
        force: true

    - name: MongoDB - Add apt source
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/mongodb-server-7.0.asc] http://repo.mongodb.org/apt/debian bookworm/mongodb-org/7.0 main

    - name: Graylog - Download gpg key
      ansible.builtin.get_url:
        url: https://packages.graylog2.org/repo/debian/keyring.gpg
        dest: /usr/share/keyrings/packages.graylog2.org.gpg
        mode: 0644
        force: true

    - name: Graylog - Add apt source
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/usr/share/keyrings/packages.graylog2.org.gpg] https://packages.graylog2.org/repo/debian/ stable 6.0

    - name: Install required system packages
      ansible.builtin.apt:
        pkg:
          - opensearch=2.15.*
          - mongodb-org=7.0.*
          - graylog-server=6.0.*
        update_cache: true
      environment:
        OPENSEARCH_INITIAL_ADMIN_PASSWORD: bKgOZxXR2_0a-34X

    - name: Update opensearch.yml file with host wildcard
      ansible.builtin.replace:
        path: /etc/opensearch/opensearch.yml
        regexp: '^#network.host: 192.168.0.1$'
        replace: "network.host: 0.0.0.0"

    - name: Update opensearch.yml file with host port
      ansible.builtin.replace:
        path: /etc/opensearch/opensearch.yml
        regexp: '^#http.port: 9200$'
        replace: "http.port: 9200"

    - name: Update opensearch.yml file with seed_hosts
      ansible.builtin.replace:
        path: /etc/opensearch/opensearch.yml
        regexp: '^#discovery.seed_hosts: \["host1", "host2"]$'
        replace: "discovery.seed_hosts: [0.0.0.0]"

    - name: Disable TLS for opensearch
      ansible.builtin.blockinfile:
        path: /etc/opensearch/opensearch.yml
        block: "plugins.security.disabled: true"

    - name: Start opensearch service
      ansible.builtin.systemd_service:
        name: opensearch
        enabled: true
        state: started

    - name: Start mongod service
      ansible.builtin.systemd_service:
        name: mongod
        enabled: true
        state: started

    - name: Update graylog conf file with password_secret
      ansible.builtin.replace:
        path: /etc/graylog/server/server.conf
        regexp: '^password_secret =$'
        replace: "password_secret = {{ graylog_cluster_password_secret }}"

    - name: Update graylog conf file with root_password_sha2
      ansible.builtin.replace:
        path: /etc/graylog/server/server.conf
        regexp: '^root_password_sha2 =$'
        replace: "root_password_sha2 = {{ graylog_root_password_sha2 }}"

    - name: Update graylog conf file with http_bind_address
      ansible.builtin.blockinfile:
        path: /etc/graylog/server/server.conf
        insertafter: '#http_bind_address = 127.0.0.1:9000'
        marker: "# {mark} ANSIBLE MANAGED BLOCK http_bind_address"
        block: http_bind_address = 0.0.0.0

    - name: Update graylog conf file with prometheus_exporter_enabled
      ansible.builtin.replace:
        path: /etc/graylog/server/server.conf
        regexp: '^#prometheus_exporter_enabled = false$'
        replace: "prometheus_exporter_enabled = true"

    - name: Update graylog conf file with prometheus_exporter_bind_address
      ansible.builtin.replace:
        path: /etc/graylog/server/server.conf
        regexp: '^#prometheus_exporter_bind_address = 127.0.0.1:9833$'
        replace: "prometheus_exporter_bind_address = 0.0.0.0:9833"

    - name: Start graylog-server service
      ansible.builtin.systemd_service:
        name: graylog-server
        enabled: true
        state: started

    - name: Pause for 10 seconds to startup service
      ansible.builtin.pause:
        seconds: 10

    - name: Slurp
      ansible.builtin.slurp:
        src: /var/log/graylog-server/server.log
      register: slurp_graylog_log

    - name: Access the website and do the manual setup
      ansible.builtin.debug:
        msg: "{{ slurp_graylog_log['content'] | b64decode | regex_findall('Initial configuration is accessible at.*') | last }}"


# Graylog Pipeline configuration

# Step 0
# Rule: 1.1 HAProxy raw syslog grok pattern
# if
# Message has field 'message'
# Check if value in 'message' is a not_null
# Check if value in 'message' is a string
# then
# Match grok on field 'message' - %{SYSLOGHOST:syslog_host} %{SYSLOGPROG:syslog_program}: %{GREEDYDATA:syslog_message}

# Step 1
# Rule: 2.1 HAProxy syslog_message grok pattern
# if
# Message has field 'syslog_message'
# Check if value in 'syslog_message' is a not_null
# Check if value in 'syslog_message' is a string
# then
# Match grok on field 'syslog_message' - (?<client>%{IP:client_ip}:%{POSINT:client_port}) \\[%{NOTSPACE:accept_date_string}\\] (%{NOTSPACE:frontend_name}: %{GREEDYDATA:frontend_error}|%{NOTSPACE:frontend_name})
# Match grok on field 'syslog_message' - %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE:backend_name}/%{NOTSPACE:backend_server}
# Match grok on field 'syslog_message' - %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE:timings} \\+?%{NONNEGINT:bytes_read:long} %{NOTSPACE:termination_state} %{NOTSPACE:connection} %{NOTSPACE:queue}
# Match grok on field 'syslog_message' - %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE:timings} %{INT:http_status_code:short} \\+?%{NONNEGINT:bytes_read:long} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{NOTSPACE:connection} %{NOTSPACE:queue}
# Match grok on field 'syslog_message' - %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NOTSPACE}( \\{%{DATA:captured_request_headers}\\})?( \\{%{DATA:captured_response_headers}\\})? \"%{DATA:http_request}\"


# Step 2
# Rule: 3.1 HAProxy http_request grok pattern
# if
# Message has field 'http_request'
# Check if value in 'http_request' is a not_null
# Check if value in 'http_request' is a string
# then
# Match grok on field 'http_request' - %{WORD:http_method} %{NOTSPACE:http_uri} HTTP/%{NUMBER:http_version}


# Step 3
# Code rule
# rule "4.1 HAProxy accept_date conversion"
# when
#   has_field(
#     field : "accept_date"
#   )
#   AND
#   is_string($message."accept_date")
# then
#   let output_1 = parse_date(to_string($message."accept_date"), "dd/MMM/yyyy:HH:mm:ss.SSS");
#   set_field(
#     field : "accept_date",
#     value : output_1
#   );
# end

# Code rule
# rule "4.2 HAProxy client_ip conversion"
# when
#   has_field(
#     field : "client_ip"
#   )
#   AND
#   is_string($message."client_ip")
# then
#   let output_1 = to_ip($message."client_ip");
#   set_fields({
#         client_ip: output_1,
#         client_ip_anon: output_1.anonymized
#     });
# end

# Rule: 4.3 HAProxy http_uri grok matching
# if
# Message has field 'http_uri'
# Check if value in 'http_uri' is a not_null
# Check if value in 'http_uri' is a string
# then
# Match grok on field 'http_uri' - (?:%{URIPROTO:http_uri_proto}://)?(?:%{USER:http_uri_user}(?::[^@]*)?@)?(?<http_uri_host>%{IPORHOST}(?::%{POSINT})?)?(?<http_uri_path_param>%{URIPATH:http_uri_path}(?:%{URIPARAM:http_uri_param})?)?
