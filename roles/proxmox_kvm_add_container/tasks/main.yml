---
# file: roles/proxmox_kvm_add_container/tasks/main.yml
# - name: Make sure base system container template is present
#   community.general.proxmox_template:
#     node: "{{ hostvars[item].node }}"
#     api_host: "{{ inventory_hostname }}"
#     api_user: "{{ api_user }}"
#     api_password: "{{ api_password }}"
#     storage: "{{ hostvars[item].template_storage }}"
#     content_type: 'iso'
#     src: 'https://cdimage.debian.org/cdimage/weekly-builds/amd64/iso-dvd/debian-testing-amd64-DVD-1.iso'
#     state: present
#   when: (hostvars[item].node == ansible_hostname) and (item in (ansible_limit | default(groups['kvm'])))
#   loop: "{{ groups['kvm'] }}"

# https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/

- name: Create new VM with minimal options
  community.general.proxmox_kvm:
    node: "{{ hostvars[item].node }}"
    api_host: "{{ inventory_hostname }}"
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    ide:
      ide0: 'local:iso/debian-12.6.0-amd64-DVD-1.iso,media=cdrom'
    vmid: "{{ hostvars[item].vmid }}"
    name: "{{ item }}"
    description: "{{ hostvars[item].description }}" # ?
    cores: "{{ hostvars[item].cores }}"
    vcpus: 1
    memory: "{{ hostvars[item].memory }}"
    scsihw: 'virtio-scsi-single' # maybe change to virtio block
    virtio:
      virtio0: 'local-lvm:16,iothread=on'
    net:
      net0: "virtio={{ hostvars[item].hwaddr }},bridge=vmbr0"
    ipconfig:
      ipconfig0: "ip={{ hostvars[item].ip }},gw={{ hostvars[item].gw }},ip6={{ hostvars[item].ip6 }},gw6={{ hostvars[item].gw6 }}"
    sshkeys: "{{ lookup('ansible.builtin.file', 'ssh-keys/homelab.pub') }}"
    onboot: true
    state: present
  when: (hostvars[item].node == ansible_hostname) and (item in (ansible_limit | default(groups['kvm'])))
  loop: "{{ groups['kvm'] }}"

#
#
#

# - name: Make sure base system container template is present
#   community.general.proxmox_template:
#     node: "{{ hostvars[item].node }}"
#     api_host: "{{ inventory_hostname }}"
#     api_user: "{{ api_user }}"
#     api_password: "{{ api_password }}"
#     storage: "{{ hostvars[item].template_storage }}"
#     content_type: "{{ hostvars[item].template_content_type }}"
#     template: "{{ hostvars[item].template }}"
#     state: present
#   when: (hostvars[item].node == ansible_hostname) and (item in (ansible_limit | default(groups['lxc'])))
#   loop: "{{ groups['lxc'] }}"

# - name: Start containers
#   community.general.proxmox:
#     api_host: "{{ inventory_hostname }}"
#     api_user: "{{ api_user }}"
#     api_password: "{{ api_password }}"
#     vmid: "{{ hostvars[item].vmid }}"
#     state: started
#   when: (hostvars[item].node == ansible_hostname) and (item in (ansible_limit | default(groups['lxc'])))
#   loop: "{{ groups['lxc'] }}"
